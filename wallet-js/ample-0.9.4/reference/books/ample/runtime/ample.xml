<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../../stylesheets/page.xsl"?>
<object name="ample" xextends="runtime:Document">
	<abstract>
		<locale>
			Represents the Ample SDK document created out of all Ample SDK fragments found on the page.
			In addition to the members listed in the table below it also has all members of <link type="class">Document</link> object.
		</locale>
	</abstract>
	<abstract>
		<locale>
			If you are coming from the jQuery universe, you will most likely enjoy using <link type="object">ample</link>.<link type="method">query</link> function,
			which is the jQuery-like API to Ample SDK. The function is overloaded and it can be called in any of the following flavours:
			<ul>
				<li><link type="class">Query</link> <link type="object">ample</link>.query(String <em>selector</em>[, <link type="class">Node</link> <em>context</em>[, Function <em>resolver</em>]])</li>
				<li><link type="class">Query</link> <link type="object">ample</link>.query(String <em>xml</em>)</li>
				<li><link type="class">Query</link> <link type="object">ample</link>.query(<link type="class">Query</link> <em>collection</em>)</li>
				<li><link type="class">Query</link> <link type="object">ample</link>.query(<link type="class">Element</link> <em>element</em>)</li>
				<li><link type="class">Query</link> <link type="object">ample</link>.query(<link type="class">NodeList</link> <em>nodelist</em>)</li>
			</ul>
		</locale>
	</abstract>
	<remarks />
	<examples />
	<implements />
	<members>
		<properties>
			<!--property name="activeElement" type="Element" readonly="true">
				<description>
					<locale>
						Retrieves a reference to an element in the document that currently has focus.
					</locale>
				</description>
			</property-->
			<property name="classes" type="Object" readonly="true">
				<description>
					<locale>
						Retrieves a reference to a hash object of Ample SDK base classes, and markup elements and attributes.
					</locale>
				</description>
			</property>
			<property name="prefixes" type="Object" readonly="true">
				<description>
					<locale>
						Retrieves a reference to a hash object of namespace prefixes collected from the root element of the hosting HTML page.
					</locale>
				</description>
			</property>
			<property name="easing" type="Object" readonly="true">
				<description>
					<locale>
						Retrieves a reference to a hash object of easing functions.
					</locale>
				</description>
			</property>
			<!-- Locale -->
			<property name="locale" type="Locale" readonly="true">
				<description>
					<locale>
						Retrieves a reference to localization API.
					</locale>
				</description>
			</property>
			<!--  -->
			<property name="readyState" type="String" readonly="true">
				<description>
					<locale>
						Retrieves a value that indicates the current state of the object. Possible values:
						"uninitialized" - Object is not initialized with data,
						"loading" - Object is loading its data,
						"loaded" - Object has finished loading its data,
						"interactive" - User can interact with the object even though it is not fully loaded,
						"complete" - Object is completely initialized.
					</locale>
				</description>
			</property>
		</properties>
		<methods>
			<!-- Query -->
			<method name="query" type="Query">
				<arguments>
					<argument name="query" type="String">
						<description>
							<locale>
								CSS selector.
							</locale>
						</description>
					</argument>
					<argument name="context" required="false" type="Node">
						<description>
							<locale>
								Context object. If not specified, ample document object is in use.
							</locale>
						</description>
					</argument>
					<argument name="resolver" required="false" type="Function">
						<description>
							<locale>
								Namespace resolver function. If not specified, selector will match against tag names.
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="xml" type="String">
						<description>
							<locale>
								Valid XML string.
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="element" type="Element">
						<description>
							<locale>
								An Ample SDK Element object.
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="nodelist" type="NodeList">
						<description>
							<locale>
								An Ample SDK NodeList object.
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="query" type="Query">
						<description>
							<locale>
								Result of other call to ample.query
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						jQuery-like API to Ample SDK document.
					</locale>
				</description>
			</method>
			<!-- Guard -->
			<method name="guard" type="Void">
				<arguments>
					<argument name="arguments" type="Arguments">
						<description>
							<locale>
								arguments object.
							</locale>
						</description>
					</argument>
					<argument name="parameters" type="Array">
						<description>
							<locale>
								array of parameter definitions.
								Each parameter definition is an array in the following format: {String} name, {Function} type[, {Boolean} optional, {Boolean} allownull]
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Helps validating API in custom extensions.
					</locale>
				</description>
			</method>
			<!-- Ajax -->
			<method name="ajax" type="XMLHttpRequest">
				<arguments>
					<argument name="settings" type="Object">
						<description>
							<locale>
								Properties bag. List of properties supported:
								<ul>
									<li><b>type</b> - The type of request to make ("POST" or "GET"), default is "GET".</li>
									<li><b>url</b> - A string containing the URL to which the request is sent.</li>
									<li><b>async</b> - By default, all requests are sent asynchronous.</li>
									<li><b>data</b> - Data to be sent to the server.</li>
									<li><b>dataType</b> - The type of data that you're expecting back from the server ("xml", "html", "script", "json" or "text").</li>
									<li><b>timeout</b> - A timeout (in milliseconds) for the request. </li>
									<li><b>success(data, status, xhr)</b> - A function to be called if the request succeeds. Parameter status can have of the following values: "success", "notmodified", "error", "timeout", "abort", or "parsererror".</li>
									<li><b>error(xhr, status)</b> - A function to be called if the request fails.</li>
									<li><b>complete(xhr, status)</b> - A function to be called when the request finishes</li>
									<li><b>username</b> - A username to be used in response to an HTTP access authentication request.</li>
									<li><b>password</b> - A password to be used in response to an HTTP access authentication request.</li>
									<li><b>headers</b> - Headers bag</li>
								</ul>
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Performs an asynchronous HTTP (Ajax) request.
					</locale>
				</description>
			</method>
			<method name="get" type="XMLHttpRequest">
				<arguments>
					<argument name="url" type="String">
						<description>
							<locale>
								A string containing the URL to which the request is sent.
							</locale>
						</description>
					</argument>
					<argument name="data" type="Variant" required="false">
						<description>
							<locale>
								A map or string that is sent to the server with the request.
							</locale>
						</description>
					</argument>
					<argument name="success" type="Function" required="false">
						<description>
							<locale>
								A callback function that is executed if the request succeeds. Consult <link type="method">ajax</link> function for parameters.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Loads data from the server using a HTTP GET request.
					</locale>
				</description>
			</method>
			<method name="post" type="XMLHttpRequest">
				<arguments>
					<argument name="url" type="String">
						<description>
							<locale>
								A string containing the URL to which the request is sent.
							</locale>
						</description>
					</argument>
					<argument name="data" type="Variant" required="false">
						<description>
							<locale>
								A map or string that is sent to the server with the request.
							</locale>
						</description>
					</argument>
					<argument name="success" type="Function" required="false">
						<description>
							<locale>
								A callback function that is executed if the request succeeds. Consult <link type="method">ajax</link> function for parameters.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Loads data from the server using a HTTP POST request.
					</locale>
				</description>
			</method>
			<!-- Config -->
			<method name="config" type="Variant">
				<arguments>
					<argument name="name" type="String">
						<description>
							<locale>
								Parameter name
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="name" type="String">
						<description>
							<locale>
								Parameter name
							</locale>
						</description>
					</argument>
					<argument name="value" type="Variant">
						<description>
							<locale>
								Parameter value
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Sets or retrieves a parameter. List of parameters:
						<ul>
							<li><b>version</b> - <em>Read-only</em>. Ample SDK version</li>
							<li><b>locale</b> - Ample SDK culture</li>
							<li><b>user-agent</b> - Ample SDK user agent string</li>
							<li><b>user-locale</b> - User locale</li>
							<li><b>module-history-fix</b> - fix IE hash problem</li>
							<li><b>fix-ie-css-transitions</b> - fix IE6-9 transition style property</li>
							<li><b>enable-css-hover</b> - Enables :hover on all elements</li>
							<li><b>enable-transitions</b> - Enable/Disable transitions</li>
							<li><b>enable-style</b> - Enable/Disable style property</li>
							<li><b>enable-guard</b> - Enable/Disable API validation</li>
						</ul>
					</locale>
				</description>
			</method>
			<method name="param" type="String">
				<arguments>
					<argument name="value" type="Variant">
						<description>
							<locale>
								An array or object to serialize.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Creates a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
					</locale>
				</description>
			</method>
			<method name="ready" type="Void">
				<arguments>
					<argument name="handler" type="Function">
						<description>
							<locale>
								Handler function.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Registers a handler to be executed when page has been completely loaded.
					</locale>
				</description>
			</method>
			<method name="extend" type="Object">
				<arguments>
					<argument name="target" type="Object">
						<description>
							<locale>
								Target object for extension.
							</locale>
						</description>
					</argument>
					<argument name="source" type="Object">
						<description>
							<locale>
								Source object to extend from.
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="element" type="Function">
						<description>
							<locale>
								Element definition. Must have <link type="class">Element</link> in its prototype chain.
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="attribute" type="Function">
						<description>
							<locale>
								Attribute definition. Must have <link type="class">Attr</link> in its prototype chain.
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="event" type="Function">
						<description>
							<locale>
								Event interface definition. Must have <link type="class">Event</link> in its prototype chain.
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="pi" type="Function">
						<description>
							<locale>
								Processing instruction definition. Must have <link type="class">ProcessingInstruction</link> in its prototype chain.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Core extensibility API.
						The source object members get signed automatically.
					</locale>
				</description>
			</method>
			<method name="publish" type="Void">
				<arguments>
					<argument name="source" type="Object">
						<description>
							<locale>
								Object to be published.
							</locale>
						</description>
					</argument>
					<argument name="name" type="String">
						<description>
							<locale>
								Name of object.
							</locale>
						</description>
					</argument>
					<argument name="target" type="Object" required="false">
						<description>
							<locale>
								Target for export.
								If not specified, window is in use.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Signs and publishes source object as member of target.
					</locale>
				</description>
			</method>
			<method name="include" type="Void">
				<arguments>
					<argument name="src" type="String">
						<description>
							<locale>
								Location of a file.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Loads JavaScript file. Calls to <link type="object">ample</link>.<link type="method">include</link>() from within the loaded file will properly resolve relative file locations.
					</locale>
				</description>
			</method>
			<!--  -->
			<method name="open" type="Void">
				<description>
					<locale>
						Opens Ample SDK fragment. This method can only be called while page is loading.
					</locale>
				</description>
			</method>
			<method name="close" type="Void">
				<description>
					<locale>
						Closes Ample SDK fragment. This method can only be called while page is loading.
					</locale>
				</description>
			</method>
			<!-- Elements -->
			<method name="$instance" type="Element">
				<arguments>
					<argument name="node" type="HTMLElement">
						<description>
							DOM HTML element
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						<b>UI element definition API.</b> Finds corresponding to the HTML DOM element in the Ample SDK DOM.
					</locale>
				</description>
			</method>
			<method name="$encodeXMLCharacters" type="String">
				<arguments>
					<argument name="value" type="String">
						<description>
							<locale>
								String value to encode.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Encodes XML characters, such as &amp;, &lt;, &gt;, " and ' to XML entities.
					</locale>
				</description>
			</method>
			<method name="$decodeXMLCharacters" type="String">
				<arguments>
					<argument name="value" type="String">
						<description>
							<locale>
								String value to decode.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Decodes XML entities, such as &amp;lt;, &amp;gt;, &amp;amp;, &amp;quot; and &amp;apos; to XML characters.
					</locale>
				</description>
			</method>
			<!-- Events -->
			<method name="bind" type="Void">
				<arguments>
					<argument name="type" type="String">
						<description>
							<locale>
								Event name
							</locale>
						</description>
					</argument>
					<argument name="handler" type="Function">
						<description>
							<locale>
								Handler function
							</locale>
						</description>
					</argument>
					<argument name="capture" type="Boolean" required="false">
						<description>
							<locale>
								If true, the handler will be executed during capture phase only
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Registers a handler with document
					</locale>
				</description>
			</method>
			<method name="unbind" type="Void">
				<arguments>
					<argument name="type" type="String">
						<description>
							<locale>
								Event name
							</locale>
						</description>
					</argument>
					<argument name="handler" type="Function">
						<description>
							<locale>
								Handler function
							</locale>
						</description>
					</argument>
					<argument name="capture" type="Boolean" required="false">
						<description>
							<locale>
								If true, the handler will be executed during capture phase only
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Unregisters a handler from document
					</locale>
				</description>
			</method>
			<method name="trigger" type="Void">
				<arguments>
					<argument name="type" type="String">
						<description>
							<locale>
								Event name
							</locale>
						</description>
					</argument>
					<argument name="detail" type="Variant" required="false">
						<description>
							<locale>
								Event detail
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Triggers an event on document.
					</locale>
				</description>
			</method>
			<!-- History -->
			<method name="bookmark" type="Variant">
				<arguments />
				<arguments>
					<argument name="hash" type="String" required="true">
						<description>
							<locale>
								Hash value.
							</locale>
							<locale xml:lang="ru">
								Значение метки.
							</locale>
						</description>
					</argument>
					<argument name="title" type="String" required="false">
						<description>
							<locale>
								Title value.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Manages browser history entries. When no arguments passed it returns the current hash value, otherwise adds a page with specifyed hash into the browser history. The <link type="event">hashchange</link> event is not fired at this point.
					</locale>
					<locale xml:lang="ru">
						Добавляет страницу с указанной меткой (которая является хэшем) в историю навигации браузера.
					</locale>
				</description>
			</method>
			<!-- Utilities -->
			<method name="resolveUri" type="String">
				<arguments>
					<argument name="uri" type="String" required="true">
						<description>
							<locale>
								Uri value to resolve.
							</locale>
						</description>
					</argument>
					<argument name="baseUri" type="String" required="true">
						<description>
							<locale>
								Base uri value to resolve against.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Resolves uri against base uri.
					</locale>
				</description>
			</method>
			<!-- Data -->
			<method name="data" type="Variant">
				<arguments>
					<argument name="element" type="Element">
						<description>
							<locale>
								The DOM element.
							</locale>
						</description>
					</argument>
					<argument name="name" type="String">
						<description>
							<locale>
								A string key name.
							</locale>
						</description>
					</argument>
				</arguments>
				<arguments>
					<argument name="element" type="Element">
						<description>
							<locale>
								The DOM element.
							</locale>
						</description>
					</argument>
					<argument name="name" type="String">
						<description>
							<locale>
								A string key name.
							</locale>
						</description>
					</argument>
					<argument name="value" type="Variant">
						<description>
							<locale>
								The data value.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Gets value at named data store for the specified element
						or sets arbitrary data associated with the specified element.
					</locale>
				</description>
			</method>
			<!-- Modal -->
			<method name="modal" type="Void">
				<arguments>
					<argument name="element" type="Element" required="true">
						<description>
							<locale>
								Element to be set as modal or null to reset.
							</locale>
						</description>
					</argument>
				</arguments>
				<description>
					<locale>
						Sets element in a modal state when element reference provided,
						Unsets modal state from the modal element if null passed.
						UI Events originated outside this element get supressed,
						except for one <link type="event" href="runtime:Element">modal</link> that is fired upon a click outside modal area.
					</locale>
				</description>
			</method>
			<!-- Hooks -->
			<method name="$init" type="Void">
				<description>
					<locale>
						Forces Ample SDK to start initialization immediately.
						Call this method to initialize Ample SDK in case you loaded framework resources after the page load.
					</locale>
				</description>
			</method>
		</methods>
		<events>
			<event name="configchange" type="CustomEvent" cancelable="false" bubbles="false">
				<description>
					<locale>
						Fires after the config value changes.
						The <link type="property" href="runtime:CustomEvent">detail</link> property keeps the name of the parameter name changed.
					</locale>
				</description>
			</event>
			<event name="readystatechange" type="Event" cancelable="false" bubbles="false">
				<description>
					<locale>
						Fires when the state of the object has changed.
						You can use the <link type="property">readyState</link> property to query the current state of the element when the <link type="event">readystatechange</link> event fires.
					</locale>
				</description>
			</event>
			<!-- History -->
			<event name="hashchange" type="HashChangeEvent" cancelable="false" bubbles="false">
				<description>
					<locale>
						Fires on the document when user navigates browser history.
						Please note this event is not fired when <link type="method">bookmark</link> method is called.
					</locale>
					<locale xml:lang="ru">
						Загорается на объекте <link type="class">Document</link>, когда пользователь перемещается по истории навигации браузера.
					</locale>
				</description>
			</event>
			<!-- Locale -->
			<event name="localechange" type="CustomEvent" cancelable="false" bubbles="false">
				<description>
					<locale>
						Fires on the document when locale has been successfully changed.
						The <link type="property" href="runtime:CustomEvent">detail</link> property keeps the new locale name name.
					</locale>
				</description>
			</event>
			<!-- Global Ajax Event Handlers -->
			<!--
			<event name="ajaxStart" type="CustomEvent" cancelable="false" bubbles="false">
				<description>
					<locale>
						First Ajax request in queue has been started.
					</locale>
				</description>
			</event>
			<event name="ajaxStop" type="CustomEvent" cancelable="false" bubbles="false">
				<description>
					<locale>
						All Ajax requests in the queue have been completed.
					</locale>
				</description>
			</event>
			-->
		</events>
	</members>
</object>